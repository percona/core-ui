{"version":3,"file":"index.production.js","sources":["../src/types.ts","../src/regions.ts","../src/providers.ts","../src/ConnectionConfig.tsx"],"sourcesContent":["import { DataSourceJsonData } from '@grafana/data';\n\nexport enum AwsAuthType {\n  Keys = 'keys',\n  Credentials = 'credentials',\n  Default = 'default', // was 'arn',\n  EC2IAMRole = 'ec2_iam_role',\n  /**\n   * @deprecated use default\n   */\n  ARN = 'arn',\n}\n\nexport interface AwsAuthDataSourceJsonData extends DataSourceJsonData {\n  authType?: AwsAuthType;\n  assumeRoleArn?: string;\n  externalId?: string;\n  profile?: string; // Credentials profile name, as specified in ~/.aws/credentials\n  defaultRegion?: string; // region if it is not defined by your credentials file\n  endpoint?: string;\n}\n\nexport interface AwsAuthDataSourceSecureJsonData {\n  accessKey?: string;\n  secretKey?: string;\n}\n","export const standardRegions: string[] = [\n  'af-south-1',\n  'ap-east-1',\n  'ap-northeast-1',\n  'ap-northeast-2',\n  'ap-northeast-3',\n  'ap-south-1',\n  'ap-southeast-1',\n  'ap-southeast-2',\n  'ca-central-1',\n  'cn-north-1',\n  'cn-northwest-1',\n  'eu-central-1',\n  'eu-north-1',\n  'eu-west-1',\n  'eu-west-2',\n  'eu-west-3',\n  'me-south-1',\n  'sa-east-1',\n  'us-east-1',\n  'us-east-2',\n  'us-gov-east-1',\n  'us-gov-west-1',\n  'us-iso-east-1',\n  'us-isob-east-1',\n  'us-west-1',\n  'us-west-2',\n];\n","import { SelectableValue } from '@grafana/data';\nimport { AwsAuthType } from './types';\n\nexport const awsAuthProviderOptions = [\n  {\n    label: 'Workspace IAM Role',\n    value: AwsAuthType.EC2IAMRole,\n  },\n  {\n    label: 'AWS SDK Default',\n    value: AwsAuthType.Default,\n  },\n  {\n    label: 'Access & secret key',\n    value: AwsAuthType.Keys,\n  },\n  {\n    label: 'Credentials file',\n    value: AwsAuthType.Credentials,\n  },\n] as Array<SelectableValue<AwsAuthType>>;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Input, Select, InlineField, ButtonGroup, ToolbarButton, FieldSet } from '@grafana/ui';\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceResetOption,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n} from '@grafana/data';\n\nimport { standardRegions } from './regions';\nimport { AwsAuthDataSourceJsonData, AwsAuthDataSourceSecureJsonData, AwsAuthType } from './types';\nimport { awsAuthProviderOptions } from './providers';\n\nconst toOption = (value: string) => ({ value, label: value });\n\nexport interface ConnectionConfigProps<J = AwsAuthDataSourceJsonData, S = AwsAuthDataSourceSecureJsonData>\n  extends DataSourcePluginOptionsEditorProps<J, S> {\n  standardRegions?: string[];\n  loadRegions?: () => Promise<string[]>;\n  defaultEndpoint?: string;\n  skipHeader?: boolean;\n  skipEndpoint?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const ConnectionConfig: FC<ConnectionConfigProps> = (props: ConnectionConfigProps) => {\n  const [regions, setRegions] = useState((props.standardRegions || standardRegions).map(toOption));\n  const { loadRegions, onOptionsChange, skipHeader = false, skipEndpoint = false } = props;\n  const options = props.options;\n  let profile = options.jsonData.profile;\n  if (profile === undefined) {\n    profile = options.database;\n  }\n\n  const settings = (window as any).grafanaBootData.settings;\n  const awsAllowedAuthProviders = settings.awsAllowedAuthProviders ?? [\n    AwsAuthType.Default,\n    AwsAuthType.Keys,\n    AwsAuthType.Credentials,\n  ];\n  const awsAssumeRoleEnabled = settings.awsAssumeRoleEnabled ?? true;\n\n  const currentProvider = awsAuthProviderOptions.find((p) => p.value === options.jsonData.authType);\n\n  useEffect(() => {\n    // Make sure a authType exists in the current model\n    if (!currentProvider && awsAllowedAuthProviders.length) {\n      onOptionsChange({\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          authType: awsAllowedAuthProviders[0],\n        },\n      });\n    }\n  }, [currentProvider, options, onOptionsChange]);\n\n  useEffect(() => {\n    if (!loadRegions) {\n      return;\n    }\n\n    loadRegions().then((regions) => setRegions(regions.map(toOption)));\n  }, [loadRegions]);\n\n  return (\n    <FieldSet label={skipHeader ? '' : 'Connection Details'} data-testid=\"connection-config\">\n      <InlineField\n        label=\"Authentication Provider\"\n        labelWidth={28}\n        tooltip=\"Specify which AWS credentials chain to use.\"\n      >\n        <Select\n          className=\"width-30\"\n          value={currentProvider}\n          options={awsAuthProviderOptions.filter((opt) => awsAllowedAuthProviders.includes(opt.value!))}\n          defaultValue={options.jsonData.authType}\n          onChange={(option) => {\n            onUpdateDatasourceJsonDataOptionSelect(props, 'authType')(option);\n          }}\n        />\n      </InlineField>\n      {options.jsonData.authType === 'credentials' && (\n        <InlineField\n          label=\"Credentials Profile Name\"\n          labelWidth={28}\n          tooltip=\"Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.\"\n        >\n          <Input\n            className=\"width-30\"\n            placeholder=\"default\"\n            value={profile}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'profile')}\n          />\n        </InlineField>\n      )}\n\n      {options.jsonData.authType === 'keys' && (\n        <>\n          <InlineField label=\"Access Key ID\" labelWidth={28}>\n            {props.options.secureJsonFields?.accessKey ? (\n              <ButtonGroup className=\"width-30\">\n                <Input disabled placeholder=\"Configured\" />\n                <ToolbarButton\n                  icon=\"edit\"\n                  tooltip=\"Edit Access Key ID\"\n                  type=\"button\"\n                  onClick={onUpdateDatasourceResetOption(props as any, 'accessKey')}\n                />\n              </ButtonGroup>\n            ) : (\n              <Input\n                className=\"width-30\"\n                value={options.secureJsonData?.accessKey ?? ''}\n                onChange={onUpdateDatasourceSecureJsonDataOption(props, 'accessKey')}\n              />\n            )}\n          </InlineField>\n\n          <InlineField label=\"Secret Access Key\" labelWidth={28}>\n            {props.options.secureJsonFields?.secretKey ? (\n              <ButtonGroup className=\"width-30\">\n                <Input disabled placeholder=\"Configured\" />\n                <ToolbarButton\n                  icon=\"edit\"\n                  type=\"button\"\n                  tooltip=\"Edit Secret Access Key\"\n                  onClick={onUpdateDatasourceResetOption(props as any, 'secretKey')}\n                />\n              </ButtonGroup>\n            ) : (\n              <Input\n                className=\"width-30\"\n                value={options.secureJsonData?.secretKey ?? ''}\n                onChange={onUpdateDatasourceSecureJsonDataOption(props, 'secretKey')}\n              />\n            )}\n          </InlineField>\n        </>\n      )}\n\n      {awsAssumeRoleEnabled && (\n        <>\n          <InlineField\n            label=\"Assume Role ARN\"\n            labelWidth={28}\n            tooltip=\"Optionally, specify the ARN of a role to assume. Specifying a role here will ensure that the selected authentication provider is used to assume the specified role rather than using the credentials directly. Leave blank if you don't need to assume a role at all\"\n          >\n            <Input\n              className=\"width-30\"\n              placeholder=\"arn:aws:iam:*\"\n              value={options.jsonData.assumeRoleArn || ''}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'assumeRoleArn')}\n            />\n          </InlineField>\n          <InlineField\n            label=\"External ID\"\n            labelWidth={28}\n            tooltip=\"If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.\"\n          >\n            <Input\n              className=\"width-30\"\n              placeholder=\"External ID\"\n              value={options.jsonData.externalId || ''}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'externalId')}\n            />\n          </InlineField>\n        </>\n      )}\n      {!skipEndpoint && (\n        <InlineField label=\"Endpoint\" labelWidth={28} tooltip=\"Optionally, specify a custom endpoint for the service\">\n          <Input\n            className=\"width-30\"\n            placeholder={props.defaultEndpoint ?? 'https://{service}.{region}.amazonaws.com'}\n            value={options.jsonData.endpoint || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'endpoint')}\n          />\n        </InlineField>\n      )}\n      <InlineField\n        label=\"Default Region\"\n        labelWidth={28}\n        tooltip=\"Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.\"\n      >\n        <Select\n          className=\"width-30\"\n          value={regions.find((region) => region.value === options.jsonData.defaultRegion)}\n          options={regions}\n          defaultValue={options.jsonData.defaultRegion}\n          allowCustomValue={true}\n          onChange={onUpdateDatasourceJsonDataOptionSelect(props, 'defaultRegion')}\n          formatCreateLabel={(r) => `Use region: ${r}`}\n        />\n      </InlineField>\n      {props.children}\n    </FieldSet>\n  );\n};\n"],"names":["AwsAuthType","standardRegions","awsAuthProviderOptions","label","value","EC2IAMRole","Default","Keys","Credentials","toOption","props","_k","__read","useState","map","regions","setRegions","loadRegions","onOptionsChange","_l","skipHeader","_m","skipEndpoint","options","profile","jsonData","undefined","database","settings","window","grafanaBootData","awsAllowedAuthProviders","awsAssumeRoleEnabled","currentProvider","find","p","authType","useEffect","length","then","React","FieldSet","InlineField","labelWidth","tooltip","Select","className","filter","opt","includes","defaultValue","onChange","option","onUpdateDatasourceJsonDataOptionSelect","Input","placeholder","onUpdateDatasourceJsonDataOption","secureJsonFields","accessKey","ButtonGroup","disabled","ToolbarButton","icon","type","onClick","onUpdateDatasourceResetOption","secureJsonData","onUpdateDatasourceSecureJsonDataOption","secretKey","assumeRoleArn","externalId","defaultEndpoint","endpoint","region","defaultRegion","allowCustomValue","formatCreateLabel","r","children"],"mappings":"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"}