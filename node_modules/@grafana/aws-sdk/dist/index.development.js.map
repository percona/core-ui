{"version":3,"file":"index.development.js","sources":["../src/regions.ts","../src/types.ts","../src/providers.ts","../src/ConnectionConfig.tsx"],"sourcesContent":["export const standardRegions: string[] = [\n  'af-south-1',\n  'ap-east-1',\n  'ap-northeast-1',\n  'ap-northeast-2',\n  'ap-northeast-3',\n  'ap-south-1',\n  'ap-southeast-1',\n  'ap-southeast-2',\n  'ca-central-1',\n  'cn-north-1',\n  'cn-northwest-1',\n  'eu-central-1',\n  'eu-north-1',\n  'eu-west-1',\n  'eu-west-2',\n  'eu-west-3',\n  'me-south-1',\n  'sa-east-1',\n  'us-east-1',\n  'us-east-2',\n  'us-gov-east-1',\n  'us-gov-west-1',\n  'us-iso-east-1',\n  'us-isob-east-1',\n  'us-west-1',\n  'us-west-2',\n];\n","import { DataSourceJsonData } from '@grafana/data';\n\nexport enum AwsAuthType {\n  Keys = 'keys',\n  Credentials = 'credentials',\n  Default = 'default', // was 'arn',\n  EC2IAMRole = 'ec2_iam_role',\n  /**\n   * @deprecated use default\n   */\n  ARN = 'arn',\n}\n\nexport interface AwsAuthDataSourceJsonData extends DataSourceJsonData {\n  authType?: AwsAuthType;\n  assumeRoleArn?: string;\n  externalId?: string;\n  profile?: string; // Credentials profile name, as specified in ~/.aws/credentials\n  defaultRegion?: string; // region if it is not defined by your credentials file\n  endpoint?: string;\n}\n\nexport interface AwsAuthDataSourceSecureJsonData {\n  accessKey?: string;\n  secretKey?: string;\n}\n","import { SelectableValue } from '@grafana/data';\nimport { AwsAuthType } from './types';\n\nexport const awsAuthProviderOptions = [\n  {\n    label: 'Workspace IAM Role',\n    value: AwsAuthType.EC2IAMRole,\n  },\n  {\n    label: 'AWS SDK Default',\n    value: AwsAuthType.Default,\n  },\n  {\n    label: 'Access & secret key',\n    value: AwsAuthType.Keys,\n  },\n  {\n    label: 'Credentials file',\n    value: AwsAuthType.Credentials,\n  },\n] as Array<SelectableValue<AwsAuthType>>;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Input, Select, InlineField, ButtonGroup, ToolbarButton, FieldSet } from '@grafana/ui';\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOptionSelect,\n  onUpdateDatasourceResetOption,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n} from '@grafana/data';\n\nimport { standardRegions } from './regions';\nimport { AwsAuthDataSourceJsonData, AwsAuthDataSourceSecureJsonData, AwsAuthType } from './types';\nimport { awsAuthProviderOptions } from './providers';\n\nconst toOption = (value: string) => ({ value, label: value });\n\nexport interface ConnectionConfigProps<J = AwsAuthDataSourceJsonData, S = AwsAuthDataSourceSecureJsonData>\n  extends DataSourcePluginOptionsEditorProps<J, S> {\n  standardRegions?: string[];\n  loadRegions?: () => Promise<string[]>;\n  defaultEndpoint?: string;\n  skipHeader?: boolean;\n  skipEndpoint?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const ConnectionConfig: FC<ConnectionConfigProps> = (props: ConnectionConfigProps) => {\n  const [regions, setRegions] = useState((props.standardRegions || standardRegions).map(toOption));\n  const { loadRegions, onOptionsChange, skipHeader = false, skipEndpoint = false } = props;\n  const options = props.options;\n  let profile = options.jsonData.profile;\n  if (profile === undefined) {\n    profile = options.database;\n  }\n\n  const settings = (window as any).grafanaBootData.settings;\n  const awsAllowedAuthProviders = settings.awsAllowedAuthProviders ?? [\n    AwsAuthType.Default,\n    AwsAuthType.Keys,\n    AwsAuthType.Credentials,\n  ];\n  const awsAssumeRoleEnabled = settings.awsAssumeRoleEnabled ?? true;\n\n  const currentProvider = awsAuthProviderOptions.find((p) => p.value === options.jsonData.authType);\n\n  useEffect(() => {\n    // Make sure a authType exists in the current model\n    if (!currentProvider && awsAllowedAuthProviders.length) {\n      onOptionsChange({\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          authType: awsAllowedAuthProviders[0],\n        },\n      });\n    }\n  }, [currentProvider, options, onOptionsChange]);\n\n  useEffect(() => {\n    if (!loadRegions) {\n      return;\n    }\n\n    loadRegions().then((regions) => setRegions(regions.map(toOption)));\n  }, [loadRegions]);\n\n  return (\n    <FieldSet label={skipHeader ? '' : 'Connection Details'} data-testid=\"connection-config\">\n      <InlineField\n        label=\"Authentication Provider\"\n        labelWidth={28}\n        tooltip=\"Specify which AWS credentials chain to use.\"\n      >\n        <Select\n          className=\"width-30\"\n          value={currentProvider}\n          options={awsAuthProviderOptions.filter((opt) => awsAllowedAuthProviders.includes(opt.value!))}\n          defaultValue={options.jsonData.authType}\n          onChange={(option) => {\n            onUpdateDatasourceJsonDataOptionSelect(props, 'authType')(option);\n          }}\n        />\n      </InlineField>\n      {options.jsonData.authType === 'credentials' && (\n        <InlineField\n          label=\"Credentials Profile Name\"\n          labelWidth={28}\n          tooltip=\"Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.\"\n        >\n          <Input\n            className=\"width-30\"\n            placeholder=\"default\"\n            value={profile}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'profile')}\n          />\n        </InlineField>\n      )}\n\n      {options.jsonData.authType === 'keys' && (\n        <>\n          <InlineField label=\"Access Key ID\" labelWidth={28}>\n            {props.options.secureJsonFields?.accessKey ? (\n              <ButtonGroup className=\"width-30\">\n                <Input disabled placeholder=\"Configured\" />\n                <ToolbarButton\n                  icon=\"edit\"\n                  tooltip=\"Edit Access Key ID\"\n                  type=\"button\"\n                  onClick={onUpdateDatasourceResetOption(props as any, 'accessKey')}\n                />\n              </ButtonGroup>\n            ) : (\n              <Input\n                className=\"width-30\"\n                value={options.secureJsonData?.accessKey ?? ''}\n                onChange={onUpdateDatasourceSecureJsonDataOption(props, 'accessKey')}\n              />\n            )}\n          </InlineField>\n\n          <InlineField label=\"Secret Access Key\" labelWidth={28}>\n            {props.options.secureJsonFields?.secretKey ? (\n              <ButtonGroup className=\"width-30\">\n                <Input disabled placeholder=\"Configured\" />\n                <ToolbarButton\n                  icon=\"edit\"\n                  type=\"button\"\n                  tooltip=\"Edit Secret Access Key\"\n                  onClick={onUpdateDatasourceResetOption(props as any, 'secretKey')}\n                />\n              </ButtonGroup>\n            ) : (\n              <Input\n                className=\"width-30\"\n                value={options.secureJsonData?.secretKey ?? ''}\n                onChange={onUpdateDatasourceSecureJsonDataOption(props, 'secretKey')}\n              />\n            )}\n          </InlineField>\n        </>\n      )}\n\n      {awsAssumeRoleEnabled && (\n        <>\n          <InlineField\n            label=\"Assume Role ARN\"\n            labelWidth={28}\n            tooltip=\"Optionally, specify the ARN of a role to assume. Specifying a role here will ensure that the selected authentication provider is used to assume the specified role rather than using the credentials directly. Leave blank if you don't need to assume a role at all\"\n          >\n            <Input\n              className=\"width-30\"\n              placeholder=\"arn:aws:iam:*\"\n              value={options.jsonData.assumeRoleArn || ''}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'assumeRoleArn')}\n            />\n          </InlineField>\n          <InlineField\n            label=\"External ID\"\n            labelWidth={28}\n            tooltip=\"If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.\"\n          >\n            <Input\n              className=\"width-30\"\n              placeholder=\"External ID\"\n              value={options.jsonData.externalId || ''}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'externalId')}\n            />\n          </InlineField>\n        </>\n      )}\n      {!skipEndpoint && (\n        <InlineField label=\"Endpoint\" labelWidth={28} tooltip=\"Optionally, specify a custom endpoint for the service\">\n          <Input\n            className=\"width-30\"\n            placeholder={props.defaultEndpoint ?? 'https://{service}.{region}.amazonaws.com'}\n            value={options.jsonData.endpoint || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'endpoint')}\n          />\n        </InlineField>\n      )}\n      <InlineField\n        label=\"Default Region\"\n        labelWidth={28}\n        tooltip=\"Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.\"\n      >\n        <Select\n          className=\"width-30\"\n          value={regions.find((region) => region.value === options.jsonData.defaultRegion)}\n          options={regions}\n          defaultValue={options.jsonData.defaultRegion}\n          allowCustomValue={true}\n          onChange={onUpdateDatasourceJsonDataOptionSelect(props, 'defaultRegion')}\n          formatCreateLabel={(r) => `Use region: ${r}`}\n        />\n      </InlineField>\n      {props.children}\n    </FieldSet>\n  );\n};\n"],"names":["AwsAuthType","useState","useEffect","React","FieldSet","InlineField","Select","onUpdateDatasourceJsonDataOptionSelect","Input","onUpdateDatasourceJsonDataOption","ButtonGroup","ToolbarButton","onUpdateDatasourceResetOption","onUpdateDatasourceSecureJsonDataOption"],"mappings":"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"}